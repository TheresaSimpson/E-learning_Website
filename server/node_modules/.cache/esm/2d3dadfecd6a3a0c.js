let User,bcrypt,jwt,registerValidator,loginValidator;_cd6‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_cd6‍.w("bcryptjs",[["default",["bcrypt"],function(v){bcrypt=v}]]);_cd6‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_cd6‍.w("../utils/validation",[["registerValidator",["registerValidator"],function(v){registerValidator=v}],["loginValidator",["loginValidator"],function(v){loginValidator=v}]]);




const register = async (req, res) => {
  try {
    const result = registerValidator.validateAsync(req.body);
    const { fullName, email, password } = result;

    _cd6‍.g.console.log(result);
    //check if username/email is already in database
    const userExists = await User.findOne({ email });
    if (userExists) {
      return res.status(400).send("Email already exists.");
    }

    //hashing of password
    // const hashedPassword = await bcrypt.hash(password, 12);
    //create user
    const user = await User.create(result);
    //generate token
    const token = jwt.sign({ id: user._id }, "123456789", { expiresIn: "1h" });
    //return response

    res.status(201).json({ token });
  } catch (error) {
    _cd6‍.g.console.log(error.message);
  }
};

const login = async (req, res) => {
  //check if user is in the database

  const result = await loginValidator.validateAsync(req.body);
  const { email, password } = result;

  let user = await User.findOne({ email });
  _cd6‍.g.console.log(user);
  if (!user) {
    return res.status(400).send("Invalid credentials.");
  }
  //compare password
  const isMatch = await bcrypt.compare(password, user.password);
  if (isMatch) {
    return res.status(400).send("Invalid credentials");
  }
  //generate token
  const token = jwt.sign({ id: user._id }, "123456789", { expiresIn: "1h" });

  //return response
  res.status(200).json({ token });
};

//AUTHORIZATION(day2)

const verifyToken = (req, res, next) => {
  const token = req.headers["authorization"];
  if (!token) {
    return res.status(401).json({ message: "Not authorized." });
  }

  token = token.split(" ")[1];
  try {
    let user = jwt.verify(token, "12345678");
    req.user = user.id;
    return next();
  } catch (error) {
    res.status(401).json({ message: "Invalid token" });
  }

  next();
};

module.exports = {
  register,
  login,
  verifyToken,
};
